--
-- Copyright © 2013-2015  Nicolas Höft
-- Copyright © 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local core              = require("halmd.mdsim.core")
local log               = require("halmd.io.log")
local numeric           = require("halmd.numeric")
local utility           = require("halmd.utility")
local device            = require("halmd.utility.device")
local module            = require("halmd.utility.module")
local profiler          = require("halmd.utility.profiler")
local mdsim = {
    binning             = require("halmd.mdsim.binning")
  , max_displacement    = require("halmd.mdsim.max_displacement")
  , sort                = require("halmd.mdsim.sorts.hilbert")
}

-- grab C++ wrappers
local neighbours = {
    from_binning  = assert(libhalmd.mdsim.neighbours.from_binning)
  , from_particle = assert(libhalmd.mdsim.neighbours.from_particle)
  , is_binning_compatible = assert(libhalmd.mdsim.neighbours.is_binning_compatible)
}

local defaults
local algorithm
if device.gpu then
    defaults = {
        [2] = assert(libhalmd.mdsim.defaults_2)
      , [3] = assert(libhalmd.mdsim.defaults_3)
    }
    algorithm = {
        shared_mem = 1
      , naive      = 2
    }
end

--
-- returns species label given a table of particle instances
--
local function label(particles)
    assert(#particles == 2)
    return "(" .. particles[1].label .. " ← " .. particles[2].label .. ")"
end


---
-- Neighbour List
-- ==============
--
-- This module provides the implementation for a Verlet neighbour list. It
-- stores the neighbours for each particle that are within a certain radius to
-- reduce the computational cost for the force calculation in each time step.
--
-- Due to its nature it can only work with finite interaction potentials.
--

---
-- Construct neighbour module.
--
-- :param table args: keyword arguments
-- :param args.particle: instance, or sequence of two instances, of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :class:`halmd.mdsim.box`
-- :param table args.r_cut: matrix with elements :math:`r_{\text{c}, ij}`
-- :param number args.skin: neighbour list skin *(default: 0.5)*
-- :param string args.algorithm: Preferred implementation of the neighbour list *(GPU variant only)*
-- :param number args.occupancy: Desired cell occupancy. Defaults to
--   :class:`halmd.mdsim.defaults.occupancy()` *(GPU variant only)*
-- :param boolean args.disable_binning: Disable use of binning module and
--   construct neighbour lists from particle positions directly (*default:
--   false*).
-- :param boolean args.disable_sorting: Disable use of Hilbert sorting
--   :class:`halmd.mdsim.sorts.hilbert` (*default: false*).
-- :param args.displacement: instance or two instances of :mod:`halmd.mdsim.max_displacement` *(optional)*
-- :param args.binning: instance or two instances of :mod:`halmd.mdsim.binning` *(optional)*
--
-- If all elements in ``r_cut`` matrix are equal, a scalar value may be passed instead.
--
-- If ``displacement`` or ``binning`` is left unspecified, a default module of
-- :mod:`halmd.mdsim.max_displacement` or :mod:`halmd.mdsim.binning` is constructed.
-- Providing an instance of the respective module allows the reuse of the module
-- (e.g. when different neighbour lists share the first instance of ``particle``).
--
-- For the ``host`` implementation of the ``particle`` module with binning
-- disabled, Hilbert sorting is disabled also.
--
-- Specifying ``algorithm`` will affect the GPU implementation of the neighbour list
-- build when binning is enabled only. The available algorithms are ``naive`` and
-- ``shared_mem``, where the latter tends to be faster on older GPUs (i.e. ≤ Tesla C1060),
-- but slower on at least GTX 260 and later.
-- Note that the ``shared_mem`` algorithm works only when both binning modules have equal
-- number of cells in each spatial direction.
--
-- .. attribute:: particle
--
--    Sequence of the two instances of :class:`halmd.mdsim.particle`.
--
-- .. attribute:: displacement
--
--    Sequence of two instances of :class:`halmd.mdsim.max_displacement`.
--
-- .. attribute:: binning
--
--    Sequence of two instances of :class:`halmd.mdsim.binning`. May be ``nil`` if binning was disabled.
--
-- .. attribute:: cell_occupancy
--
--    Average cell occupancy. *Only available on GPU variant.*
--
-- .. attribute:: r_skin
--
--    "Skin" of the particle. This is an additional distance ratio added to the cutoff
--    radius. Particles within this extended sphere are stored as neighbours.
--
-- .. method:: disconnect()
--
--    Disconnect neighbour module from core and profiler.
--
local M = module(function(args)
    -- cutoff radius matrix of truncated potential
    local r_cut = utility.assert_kwarg(args, "r_cut")
    if type(r_cut) ~= "table" and type(r_cut) ~= "number" then
        error("bad argument 'r_cut'", 2)
    end
    -- promote scalar to matrix
    if type(r_cut) == "number" then
        r_cut = numeric.scalar_matrix(1, 1, r_cut)
    end
    -- neighbour list skin
    local skin = args.skin or 0.5 -- default value

    -- dependency injection
    local particle = utility.assert_kwarg(args, "particle")
    if type(particle) ~= "table" then
        particle = {particle, particle}
    end
    if #particle ~= 2 then
        error("bad argument 'particle'", 2)
    end

    local memory = particle[1].memory
    if memory ~= particle[2].memory then
        error("incompatible 'memory' attributes of particle instances", 2)
    end
    local preferred_algorithm
    if memory == "gpu" then
        preferred_algorithm = utility.assert_type(args.algorithm or "shared_mem", "string")
        if not algorithm[preferred_algorithm] then
            error(("unsupported neighbour list algorithm '%s'"):format(preferred_algorithm), 2)
        end
    end

    local box = utility.assert_kwarg(args, "box")
    local dimension = #box:edges()
    local logger = log.logger({label = "neighbour " .. label(particle)})
    local occupancy = args.occupancy -- may be nil

    -- domain decomposition
    local binning
    if not args.disable_binning then
        binning = args.binning
        if not binning then
            if particle[1] == particle[2] then
                binning = mdsim.binning({box = box, particle = particle[1], r_cut = r_cut, skin = skin, occupancy = occupancy})
            else
                binning = {
                    mdsim.binning({box = box, particle = particle[1], r_cut = r_cut, skin = skin, occupancy = occupancy})
                  , mdsim.binning({box = box, particle = particle[2], r_cut = r_cut, skin = skin, occupancy = occupancy})
                }
            end
        end
        if type(binning) ~= "table" then
            binning = {binning, binning}
        end
        if binning[1].particle ~= particle[1] or binning[2].particle ~= particle[2] then
            error("'particle' instances of binning modules do not match with 'particle' argument", 2)
        end

        -- Test compatiblity of binning module and fall back to from_particle
        -- if incompatible.
        --
        -- On the GPU, the binning module is required to have at least 3 cells
        -- in each spatial direction in order to be used with the neighbour
        -- module.
        if not neighbours.is_binning_compatible(binning[1], binning[2]) then
            binning = nil
            log.info("binning parameters incompatible with neighbour list algorithm")
            log.info("fall back to 'neighbours.from_particle'")
        end
    end

    local displacement = args.displacement
    if not displacement then
        if particle[1] == particle[2] then
            displacement = mdsim.max_displacement({box = box, particle = particle[1]})
        else
            displacement = {
                mdsim.max_displacement({box = box, particle = particle[1]})
              , mdsim.max_displacement({box = box, particle = particle[2]})
            }
        end
    end

    if type(displacement) ~= "table" then
        displacement = {displacement, displacement}
    end

    if displacement[1].particle ~= particle[1] or displacement[2].particle ~= particle[2] then
        error("'particle' instances of displacement modules do not match with 'particle' argument", 2)
    end

    -- neighbour lists
    local self
    if memory == "gpu" then
        if binning then
            occupancy = occupancy or assert(defaults[dimension].from_binning.occupancy)()
            self = neighbours.from_binning(particle, binning, displacement, box, r_cut, skin, occupancy, algorithm[preferred_algorithm], logger)
        else
            occupancy = occupancy or assert(defaults[dimension].from_particle.occupancy)()
            self = neighbours.from_particle(particle, displacement, box, r_cut, skin, occupancy, logger)
        end
    else
        if binning then
            self = neighbours.from_binning(particle, binning, displacement, box, r_cut, skin, logger)
        else
            self = neighbours.from_particle(particle, displacement, box, r_cut, skin, logger)
        end
    end

    -- store particle instances as Lua property
    self.particle = property(function(self) return particle end)

    -- store displacement instances as Lua property
    self.displacement = property(function(self) return displacement end)

    -- store binning instances as Lua property
    self.binning = property(function(self) return binning end)

    -- sort particles before neighbour list update
    if not args.disable_sorting then
        -- the host variant of the Hilbert sort module requires a binning module,
        -- disable sorting if binning is not available
        if memory ~= "host" or binning then
            local sort = mdsim.sort({box = box, particle = particle[1], binning = binning and binning[1]})
            self:on_prepend_update(sort.order)
        end
    end

    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "neighbour list module")

    -- connect neighbour module to profiler
    local runtime = assert(self.runtime)
    table.insert(conn, profiler:on_profile(runtime.update, "update of neighbour lists " .. label(self.particle)))

    return self
end)

return M
