--
-- Copyright © 2012-2014 Felix Höfling
-- Copyright © 2012      Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module  = require("halmd.utility.module")
local utility = require("halmd.utility")

---
-- All
-- ===
--
-- A particle group represents a subset of particles, which is defined
-- by an instance of particle together with a sequence of indices.
--
-- Example::
--
--    -- construct particle instance for given simulation domain
--    local system = halmd.mdsim.particle({particles = 10000})
--
--    -- select all particles
--    local group_all = halmd.mdsim.particle_groups.all({particle = particle})
--

-- grab C++ wrappers
local all = assert(libhalmd.mdsim.particle_groups.all)

---
-- Construct particle group from all particles.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param string args.label: group label (defaults to :attr:`halmd.mdsim.particle.label`)
-- :param boolean args.global: particle group comprises the whole simulation
--                             world (*default:* ``true``)
--
-- .. attribute:: label
--
--    Particle group label.
--
-- .. attribute:: particle
--
--    Instance of :class:`halmd.mdsim.particle`.
--
-- .. attribute:: size
--
--    Number of particles in group.
--
-- .. attribute:: global
--
--    The value of ``args.global`` passed upon construction.
--
local M = module(function(args)
    local particle = utility.assert_kwarg(args, "particle")
    local label = utility.assert_type(args.label or assert(particle.label), "string")
    local global = utility.assert_type(args.global == nil and true or args.global, "boolean")

    -- construct particle group
    local self = all(particle)

    -- attach particle instance as read-only property
    self.particle = property(function(self)
        return particle
    end)

    -- attach label as read-only property
    self.label = property(function(self)
        return label
    end)

    -- attach global property
    self.global = property(function(self)
        return global
    end)

    return self
end)

return M
